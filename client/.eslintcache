[{"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/index.js":"1","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/App.js":"2","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/store.js":"3","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/routes/PrivateRoute.js":"4","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/routes/PublicRoute.js":"5","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/Login.js":"6","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Navigation.js":"7","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/reducers/rootReducer.js":"8","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Map.js":"9","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Hospitals.js":"10","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Device.js":"11","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/socket.js":"12","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/reducers/deviceReducer.js":"13","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/reducers/hospitalReducer.js":"14","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/mapStyles.js":"15","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/actions/hospitalActions.js":"16","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/actions/deviceActions.js":"17","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/actions/actionTypes.js":"18"},{"size":487,"mtime":1610409092000,"results":"19","hashOfConfig":"20"},{"size":1145,"mtime":1619285562371,"results":"21","hashOfConfig":"20"},{"size":324,"mtime":1610728780000,"results":"22","hashOfConfig":"20"},{"size":951,"mtime":1619258104320,"results":"23","hashOfConfig":"20"},{"size":957,"mtime":1617648875517,"results":"24","hashOfConfig":"20"},{"size":5774,"mtime":1619257994976,"results":"25","hashOfConfig":"20"},{"size":4104,"mtime":1626174467420,"results":"26","hashOfConfig":"20"},{"size":262,"mtime":1610728743000,"results":"27","hashOfConfig":"20"},{"size":4320,"mtime":1626172391160,"results":"28","hashOfConfig":"20"},{"size":11503,"mtime":1625915099830,"results":"29","hashOfConfig":"20"},{"size":5498,"mtime":1626194263540,"results":"30","hashOfConfig":"20"},{"size":57,"mtime":1626193663240,"results":"31","hashOfConfig":"20"},{"size":1181,"mtime":1626175371050,"results":"32","hashOfConfig":"20"},{"size":947,"mtime":1611499018000,"results":"33","hashOfConfig":"20"},{"size":4837,"mtime":1626160976620,"results":"34","hashOfConfig":"20"},{"size":819,"mtime":1625847112515,"results":"35","hashOfConfig":"20"},{"size":1110,"mtime":1626175252000,"results":"36","hashOfConfig":"20"},{"size":304,"mtime":1610802148000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"hm8woi",{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/index.js",[],["85","86"],"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/App.js",["87","88","89","90","91","92","93"],"// import './App.css';\n// import Welcome from './components/Welcome';\nimport Navigation from './components/admin/Navigation';\n// import CompTest from './CompTest'\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport PrivateRoute from './routes/PrivateRoute';\nimport PublicRoute from './routes/PublicRoute';\nimport Login from './components/Login'\n\n\nfunction App() {\n  // return (\n  //   <Provider store={store}>\n  //   <Router>\n  //     <Switch>\n  //       <Route exact path=\"/\">\n  //         <Redirect to=\"/login\" />\n  //       </Route>\n  //       <PublicRoute path=\"/login\">\n  //           <Login />\n  //       </PublicRoute>\n  //       <PrivateRoute path=\"/dashboard\">\n        \n  //         <div className=\"App\">\n  //           {/* <Welcome /> */}\n  //           <Navigation />\n  //           {/* <CompTest /> */}\n  //         </div>\n\n  //       </PrivateRoute>\n  //     </Switch>\n  //   </Router>\n  //   </Provider>\n    \n  // );\n  return (\n    <Provider store={store}>\n      <Navigation />\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/store.js",[],"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/routes/PrivateRoute.js",["94"],"// import React, {useEffect, useState, useContext} from 'react'\nimport React, {useContext} from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n// import {LecturerContext} from '../../context/LecturerContext'\n\nconst PrivateRoute = (props) => {\n    const {children, ...rest} = props\n    const isAuth = localStorage.getItem(\"isAuthenticated\")\n    // const [isAuthenticated, setIsAuthenticated] = useState(null)\n    // useEffect(() => {\n    //     const authState = localStorage.getItem(\"isAuthenticated\")\n    //     setIsAuthenticated(authState)\n    // }, [])\n\n    // const {state} = useContext(LecturerContext)\n\n    return(\n        <Route\n            {...rest}\n            render = { () => {\n                // return state.isAuthenticated || isAuth === \"true\" ? children : <Redirect to=\"/signin\" />\n                return isAuth === \"true\" ? children : <Redirect to=\"/login\" />\n            }}\n        />\n    )\n}\n\nexport default PrivateRoute","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/routes/PublicRoute.js",["95"],"// import React, {useState, useEffect, useContext} from 'react'\nimport React, {useContext} from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n// import {LecturerContext} from '../../context/LecturerContext'\n\nconst PublicRoute = (props) => {\n    const {children, ...rest} = props\n    const isAuth = localStorage.getItem(\"isAuthenticated\")\n    // const [isAuthenticated, setIsAuthenticated] = useState(null)\n    // useEffect(() => {\n    //     const authState = localStorage.getItem(\"isAuthenticated\")\n    //     setIsAuthenticated(authState)\n    // }, [])\n\n    // const {state} = useContext(LecturerContext)\n\n    return(\n        <Route\n            {...rest}\n            render = { () => {\n                // return state.isAuthenticated || isAuth === \"true\" ? <Redirect to=\"/dashboard\" /> : children\n                return isAuth === \"true\" ? <Redirect to=\"/dashboard\" /> : children\n            }}\n         />\n    )\n}\n\nexport default PublicRoute","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/Login.js",["96","97"],"// import React, { Component } from 'react'\n// import {\n//     Form,\n//     FormGroup,\n//     Label,\n//     Input,\n//     Button\n// } from 'reactstrap'\n\n// class Login extends Component {\n    \n//     state = {\n//         email: \"\",\n//         password: \"\"\n//     }\n\n//     handleInput = (event) => {\n//         this.setState({[event.target.name] : event.target.value})\n//     }\n\n//     submitForm = () => {\n\n//     }\n\n//     render(){\n//         return(\n//             <Form>\n//                 <FormGroup>\n//                     <Label for=\"email\">Email</Label>\n//                     <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter email address\" onChange={this.handleInput} />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"password\">Password</Label>\n//                     <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"enter password\" onChange={this.handleInput} />\n//                 </FormGroup>\n//                 <Button onClick={this.submitForm} color=\"danger\">Login</Button>\n//             </Form>\n//         )\n//     }\n// }\n\n// export default Login\n\n// \n\nimport React, {useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {useHistory} from 'react-router-dom'\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://source.unsplash.com/random)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  // Static Authentication credentials\n  const EMAIL = \"admin@gmail.com\"\n  const PASSWORD = \"admin\"\n\n  const routeHistory = useHistory()\n\n  const compareDetails = () => {\n    if(email === EMAIL && password === PASSWORD){\n      localStorage.setItem(\"isAuthenticated\", \"true\")\n    }else{\n      localStorage.setItem(\"isAuthenticated\", \"false\")\n    }\n    routeHistory.push(\"/dashboard\")\n  }\n\n  // const formSubmit = (e) => {\n  //   e.preventDefault()\n  // }\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              onChange={(event) => setEmail(event.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={(event) => setPassword(event.target.value)}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              // type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={compareDetails}\n            >\n              Sign In\n            </Button>\n            {/* <Grid container>\n              <Grid item xs>\n                <Link href=\"#\" variant=\"body2\">\n                  Forgot password?\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link href=\"#\" variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box> */}\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Navigation.js",["98"],"import React, { useState, useEffect } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  TabPane,\n  TabContent,\n  NavbarText,\n  Row,\n  Col\n} from 'reactstrap';\n\nimport classnames from 'classnames'\nimport Map from './Map';\nimport Hospital from './Hospitals';\nimport Device from './Device';\n// import { getDevices, getDistance } from '../../actions/deviceActions'\n\n// Socket IO import\nimport socket from '../socket'\n\n// MAP API KEYS\n// const api_key = \"AIzaSyDNXkOCTcRTz9itRiFN9N8CziIEL9eLc5w\"\nconst api_key = \"AIzaSyC2gvpIAVI9BzKmiPR4rwmLHv68Q91P0bE\"\nlet minID;\nfunction Navigation(){\n\n  useEffect(() => {\n    console.log(\"Client: Has connected to server socket\")\n    socket.on(\"update\", (sensorData, callback) => {\n      // const {latitude, longitude, accX, accY, accZ, shock} = sensorData\n      updateSensorData(sensorData)\n      // getDevices()\n      // callback(\"Response Gotten\")\n    })\n    socket.on(\"matrix\", (matrixData) => {\n      setMatrixDataState([...matrixData])\n      minID = minDistanceHospital(matrixData)\n      console.log(\"minID: \", minID)\n      console.log(\"MATRIX RECEIVED IN CLIENT: \", matrixData)\n    })\n  },[])\n\n  // Calculate to get hospital with minimum distance\n  const minDistanceHospital = (matDat) => {\n    let minDist = 2000000\n    let minId\n    matDat.forEach(mat => {\n      if(mat.distance.distance.value < minDist){\n        minDist = mat.distance.distance.value\n        minId = mat.hospital._id\n      }\n    })\n    return minId\n  }\n\n\n  const updateSensorData = ({latitude, longitude, accX, accY, accZ, shock}) => {\n    latitude = parseFloat(latitude)\n    longitude = parseFloat(longitude)\n    setDeviceLocation({latitude, longitude, accX, accY, accZ, shock})\n  }\n\n  const [deviceLocation, setDeviceLocation] = useState({latitude: 6.393265751333534, longitude: 5.619564868102384, accX: 0, accY: 0, accZ: 0, shock: false})\n\n  const [matrixDataState, setMatrixDataState] = useState([])\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  const [activeTab, setActiveTab] = useState('1');\n  const toggleTab = tab => {\n    if(activeTab !== tab) setActiveTab(tab);\n  }\n\n  const handleLogout = () => {\n    localStorage.clear()\n  }\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">AutoCrash</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\" onClick={handleLogout}>Logout</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    <Navbar color=\"light\" light expand=\"md\">\n        <Nav tabs>\n        <NavItem>\n            <NavLink\n                className={classnames({ active: activeTab === '1' })}\n                onClick={() => { toggleTab('1'); }}\n            >\n                Map\n            </NavLink>\n        </NavItem>\n        <NavItem>\n            <NavLink\n                className={classnames({ active: activeTab === '2' })}\n                onClick={() => { toggleTab('2'); }}\n            >\n                Device\n            </NavLink>\n        </NavItem>\n        <NavItem>\n            <NavLink\n                className={classnames({ active: activeTab === '3' })}\n                onClick={() => { toggleTab('3'); }}\n            >\n                Hospitals\n            </NavLink>\n        </NavItem>\n    </Nav>\n    </Navbar>\n\n    <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Row>\n            <Col sm=\"12\">\n              <Map devLoc={deviceLocation} api_key={api_key}/>\n            </Col>\n          </Row>\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Row>\n            <Device socket={socket} devLoc={deviceLocation}/>\n          </Row>\n        </TabPane>\n        <TabPane tabId=\"3\">\n          <Row>\n            <Hospital devLoc={deviceLocation} api_key={api_key} matrix={matrixDataState} minId={minID}/>\n          </Row>\n        </TabPane>\n      </TabContent>\n    </div>\n  );\n}\n\nexport default Navigation;","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/reducers/rootReducer.js",[],"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Map.js",[],"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Hospitals.js",["99","100","101","102"],"import React, {Component} from 'react'\nimport {\n    ListGroup,\n    ListGroupItem,\n    ListGroupItemHeading,\n    ListGroupItemText,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Row\n} from 'reactstrap'\n\nimport {connect} from 'react-redux'\n\nimport {addHospital, getHospitals} from '../../actions/hospitalActions'\n\n// import axios from 'axios'\nclass Hospital extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            newHospital: {\n                hospitalName: \"\",\n                address: \"\",\n                email: \"\",\n                latitude: null,\n                longitude: null,\n                phonePrimary: \"\",\n                phoneSecondary: \"\",\n                numOfAmbulance: \"\",\n            },\n            modal: false,\n            search: null,\n            matrix: [...props.matrix]\n        }\n    }\n\n    componentDidMount(){\n        // function to get all hospitals\n        this.props.getHospitals()\n        // this.hospitalDistance()\n    }\n\n/**\n    // Format the url\n    formatUrl = (url, origins, destinations) => {\n        const {api_key} = this.props\n        let newUrl = `${url}&origins=${origins.latitude},${origins.longitude}&destinations=`\n        for (let i = 0; i <= destinations.length - 1; i++){\n            if(i == destinations.length - 1){\n                newUrl = `${newUrl}${destinations[i].geometry.coordinates[0]}%2C${destinations[i].geometry.coordinates[1]}&key=${api_key}`\n                break;\n            }\n            newUrl = `${newUrl}${destinations[i].geometry.coordinates[0]}%2C${destinations[i].geometry.coordinates[1]}%7C`\n        }\n        return newUrl;\n    }\n\n    // Function to calculate disstance from device to all hospitals\n    hospitalDistance = () => {\n        const originLoc = this.props.devLoc\n        let allHospitals = this.props.hospitals.hospitalPositions\n        // console.log(\"Device Location: \", originLoc)\n        // console.log(\"All Hospitals: \", allHospitals)\n        let hospitalsWithDistance = []\n        let gUrl = this.formatUrl(\"https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial\", \n        originLoc, allHospitals)\n        console.log(\"New Before Axios Request\")\n        // axios.get(gUrl, {headers: {\n        //     'Access-Control-Allow-Origin': '*',\n        //     'Access-Control-Allow-Methods' : 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n        //   }}).then((resp) => {\n        const headers = { 'Content-Type': 'application/json', 'mode': 'no-cors'}\n        fetch(gUrl, { headers })\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Axios Request\")\n                let hosDistance = data.rows[0].elements\n                hospitalsWithDistance = allHospitals.map((hospital, index) => {\n                    return {hospital, distance: hosDistance[index]}\n                })\n            })\n\n        console.log(hospitalsWithDistance)\n    }\n\n*/\n    // Action to create new hospital\n    newHospital = () => {\n        const newHospital = {\n            properties: {\n                hospitalName: this.state.newHospital.hospitalName,\n                address: this.state.newHospital.address,\n                email: this.state.newHospital.email,\n                phonePrimary: this.state.newHospital.phonePrimary,\n                phoneSecondary: this.state.newHospital.phoneSecondary,\n                numOfAmbulance: this.state.newHospital.numOfAmbulance,\n            },\n            geometry: {\n                coordinates: [Number(this.state.newHospital.longitude), Number(this.state.newHospital.latitude)]\n            }\n        }\n        console.log(newHospital)\n        this.props.addHospital(newHospital)\n\n        // Check to see if add was successful and then call toggle\n        this.toggleModal()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    hospitalInput = (event) => {\n        this.setState({...this.state, newHospital : {...this.state.newHospital, [event.target.name] : event.target.value}})\n    }\n\n    searchByName = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value})\n    }\n\n    myDistance = (myId) => {\n        if(this.props.matrix.length < 1){\n            return 0\n        }\n        let mDistance = this.props.matrix.filter(matrix => {\n            if(matrix.hospital._id == myId){\n                return true\n            }\n        });\n        return mDistance[0].distance.distance.text\n        // console.log(\"nDistance\",mDistance[0].distance.distance.text)\n    }\n\n    callColor = (myId) => {\n        if(this.props.matrix.length < 1){\n            return {color:\"blue\"}\n        }\n        let dist;\n        if(myId == this.props.minId){\n            dist = {color:\"green\"}\n        }else{\n            dist = {color:\"red\"}\n        }\n        return dist\n        // return mColor[0].distance.distance.text\n    }\n\n    render(){\n\n        const {hospitalPositions} = this.props.hospitals\n        // console.log(\"this.props.matrix: \", this.props.matrix)\n\n        return(\n            <div className=\"container\">\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"name\">Hospital Name</Label>\n                                <Input type=\"name\" name=\"hospitalName\" id=\"hospitalName\" placeholder=\"Enter name of hospital\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"email\">Email</Label>\n                                <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter email address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"address\">Address</Label>\n                                <Input type=\"text\" name=\"address\" id=\"address\" placeholder=\"Enter address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"latitude\">Latitude</Label>\n                                        <Input type=\"number\" name=\"latitude\" id=\"latitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"longitude\">Longitude</Label>\n                                        <Input type=\"number\" name=\"longitude\" id=\"longitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phonePrimary\">Phone 1</Label>\n                                        <Input type=\"tel\" name=\"phonePrimary\" id=\"phonePrimary\" placeholder=\"Enter Modile Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phoneSecondary\">Phone 2</Label>\n                                        <Input type=\"tel\" name=\"phoneSecondary\" id=\"phoneSecondary\" placeholder=\"Enter Office Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <FormGroup>\n                                <Label for=\"numOfAmbulance\">No. of Ambulance</Label>\n                                <Input type=\"select\" name=\"numOfAmbulance\" id=\"numOfAmbulance\" onChange={this.hospitalInput} >\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                    <option value=\"6\">6</option>\n                                    <option value=\"7\">7</option>\n                                    <option value=\"8\">8</option>\n                                </Input>\n                            </FormGroup>\n                            <Button onClick={this.newHospital} color=\"dark\" block>Add Hospital</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Create</Button>\n                <hr />\n                <Input type=\"text\" name=\"search\" placeholder=\"Search Hospital by name\" onChange={this.searchByName} />\n                <br />\n                <ListGroup>\n                    {\n                        hospitalPositions.filter(hospital => {\n                            if(this.state.search == null){\n                                return hospital\n                            }else if(hospital.properties.hospitalName.toLowerCase().includes(this.state.search.toLowerCase())){\n                                return hospital\n                            }\n                        })\n                        .map((hospital, hIndex) =>\n                            <div key={hospital.properties.id}>\n                                <ListGroupItem>\n                                    <ListGroupItemHeading>{hospital.properties.hospitalName}</ListGroupItemHeading>\n                                    <ListGroupItemText>\n                                        {hospital.properties.address}<br />\n                                        Phone: {hospital.properties.phonePrimary}   |   Email: {hospital.properties.email}<br />\n                                        Ambulance Vehicles: {hospital.properties.numOfAmbulance}<br />\n                                        Latitude: {hospital.geometry.coordinates[0]} | Longitude: {hospital.geometry.coordinates[1]}\n                                    </ListGroupItemText>\n                                    <hr />\n                                    <ListGroupItemText style={this.callColor(hospital.properties.id)}>\n                                        <strong>\n                                            Distance: {this.myDistance(hospital.properties.id)}\n                                        </strong>\n                                    </ListGroupItemText>\n                                </ListGroupItem>\n                                <br />\n                            </div> \n                        )\n                    }\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {addHospital, getHospitals})(Hospital)","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/Device.js",["103"],"import React, {Component} from 'react'\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n    CardSubtitle,\n    CardText,\n    Button,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Badge\n} from 'reactstrap'\nimport {connect} from 'react-redux'\nimport { getDevices, getDistance, addDevice } from '../../actions/deviceActions'\n// Socket IO import\nimport socket from '../socket'\n\nclass Device extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            device: {\n            },\n            distance: {\n            },\n            deviceName: \"\",\n            deviceId: \"\",\n            modal: false,\n            devLoc: props.devLoc,\n        }\n        console.log(\"Client: Has connected to server socket\")\n        socket.on(\"updateAgain\", (sensorData) => {\n            props.getDevices()\n            props.getDevices()\n            // console.log(\"Socket Update Again\")\n        })\n    }\n    \n    componentDidMount(){\n        this.props.getDevices()\n        // this.props.getDistance()\n        \n    }\n\n    refreshData = () => {\n        this.props.getDevices()\n        this.props.getDistance()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    deviceInput = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value })\n    }\n\n    updateDevice = () => {\n        const deviceDetails = {\n            deviceName: this.state.deviceName,\n            deviceId: this.state.deviceId\n        }\n        this.props.addDevice(deviceDetails)\n    }\n\n    render(){\n        const {devicePositions} = this.props.devices\n        console.log(this.state.devLoc)\n        return(\n            <div className=\"container\" style={{marginTop: \"2rem\"}}>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Edit Device</Button>\n                {/*  */}\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"deviceName\">Device Name</Label>\n                                <Input type=\"name\" name=\"deviceName\" id=\"deviceName\" placeholder=\"Enter a new name for Device\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"deviceId\">Device ID</Label>\n                                <Input type=\"name\" name=\"deviceId\" id=\"deviceId\" placeholder=\"Enter an ID\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <Button onClick={this.updateDevice} color=\"dark\" block>Save</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                {/*  */}\n                {\n                    devicePositions.map(device => {\n                        const {deviceName, deviceId, address, accX, accY, accZ, latitude, longitude, lastUpdate, shock} = device\n                        // const {latitude, longitude, accX, accY, accZ, shock} = this.props.devLoc \n                            return(\n                                <div key={device.id}>\n                                    <Card md=\"10\" xs=\"6\" sm=\"8\">\n                                        {/* <CardImg top width=\"\" src=\"/dev3.jpg\" alt=\"Card image cap\" /> */}\n                                        <img width=\"10%\" src=\"/dev3.jpg\" alt=\"device\" />\n                                        <CardBody>\n                                            <CardTitle tag=\"h5\">Name: {`${deviceName}`}</CardTitle>\n                                            <CardSubtitle tag=\"h7\" className=\"mb-2 text-muted\">ID: {`${deviceId}`}</CardSubtitle><br />\n                                            Shock State: <Badge pill color={shock ? \"danger\": \"primary\"}>{`${shock ? \"TRUE\" : \"FALSE\"}`}</Badge><br />\n                                            Address: <Badge pill>{`${address}`}</Badge><br />\n                                            {/* Latitude: <Badge color=\"secondary\" pill>{`${coordinates[0]}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${coordinates[1]}`}</Badge><br /> */}\n                                            Latitude: <Badge color=\"secondary\" pill>{`${latitude}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${longitude}`}</Badge><br />\n                                            Accelerometer::   X: <Badge pill>{`${accX}`}</Badge>   Y: <Badge pill>{`${accY}`}</Badge>   Z: <Badge pill>{`${accZ}`}</Badge><br />\n                                            Last Update: <Badge pill>{`${lastUpdate}`}</Badge><br /><br />\n                                            <Button color=\"dark\" onClick={this.refreshData}>Refresh</Button>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            )\n                        }\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    devices: state.devices,\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {getDevices, getDistance, addDevice})(Device)","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/socket.js",[],"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/reducers/deviceReducer.js",["104"],"import * as deviceData from '../data/deviceData.json'\nimport {ADD_DEVICE, DELETE_DEVICE, GET_DEVICES, GET_DISTANCE} from '../actions/actionTypes'\n\nconst initialState = {\n            // devicePositions: deviceData.default.features,\n            devicePositions: [],\n            // distances: []\n        }\n\nconst deviceReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_DEVICES:\n            return {\n                ...state,\n                devicePositions: action.payload\n\n            }\n        case GET_DISTANCE:\n            return {\n                ...state,\n                distances: action.payload\n\n            }\n        \n        // **************************** TESTING ***********************************\n        case ADD_DEVICE:\n            return {\n                ...state,\n                devicePositions: [action.payload, ...state.devicePositions]\n            }\n        case DELETE_DEVICE:\n            return {\n                ...state,\n                devicePositions: [state.devicePositions.filter(devPos => devPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default deviceReducer","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/reducers/hospitalReducer.js",["105"],"import * as hospitalData from '../data/hospitalData.json'\nimport {ADD_HOSPITAL, DELETE_HOSPITAL, GET_HOSPITALS} from '../actions/actionTypes'\n\nconst initialState = {\n            // hospitalPositions: hospitalData.default.features\n            hospitalPositions: []\n        }\n\nconst hospitalReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_HOSPITALS:\n            return {\n                ...state,\n                hospitalPositions: action.payload\n            }\n        case ADD_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [action.payload, ...state.hospitalPositions]\n            }\n        case DELETE_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [state.hospitalPositions.filter(hosPos => hosPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default hospitalReducer","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/components/admin/mapStyles.js",["106"],"export default [\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#597c84\"\n            },\n            {\n                \"lightness\": \"-37\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative.province\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"lightness\": \"0\"\n            },\n            {\n                \"saturation\": \"0\"\n            },\n            {\n                \"color\": \"#f5f5f2\"\n            },\n            {\n                \"gamma\": \"1\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.man_made\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"lightness\": \"-3\"\n            },\n            {\n                \"gamma\": \"1.00\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.natural.terrain\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#bae5ce\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": -100\n            },\n            {\n                \"lightness\": 45\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#fac9a9\"\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"labels.text\",\n        \"stylers\": [\n            {\n                \"color\": \"#4e4e4e\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#787878\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.airport\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"hue\": \"#0a00ff\"\n            },\n            {\n                \"saturation\": \"-77\"\n            },\n            {\n                \"gamma\": \"0.57\"\n            },\n            {\n                \"lightness\": \"0\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.rail\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#43321e\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.rail\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"hue\": \"#ff6c00\"\n            },\n            {\n                \"lightness\": \"4\"\n            },\n            {\n                \"gamma\": \"0.75\"\n            },\n            {\n                \"saturation\": \"-68\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"color\": \"#eaf6f8\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#a8d7d8\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"lightness\": \"-49\"\n            },\n            {\n                \"saturation\": \"-53\"\n            },\n            {\n                \"gamma\": \"0.79\"\n            }\n        ]\n    }\n]","/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/actions/hospitalActions.js",[],"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/actions/deviceActions.js",[],"/home/edward/dev/AUTO CRASH/react-auto-crash/client/src/actions/actionTypes.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":7,"column":27,"nodeType":"113","messageId":"114","endLine":7,"endColumn":33},{"ruleId":"111","severity":1,"message":"115","line":7,"column":35,"nodeType":"113","messageId":"114","endLine":7,"endColumn":40},{"ruleId":"111","severity":1,"message":"116","line":7,"column":42,"nodeType":"113","messageId":"114","endLine":7,"endColumn":48},{"ruleId":"111","severity":1,"message":"117","line":7,"column":50,"nodeType":"113","messageId":"114","endLine":7,"endColumn":58},{"ruleId":"111","severity":1,"message":"118","line":8,"column":8,"nodeType":"113","messageId":"114","endLine":8,"endColumn":20},{"ruleId":"111","severity":1,"message":"119","line":9,"column":8,"nodeType":"113","messageId":"114","endLine":9,"endColumn":19},{"ruleId":"111","severity":1,"message":"120","line":10,"column":8,"nodeType":"113","messageId":"114","endLine":10,"endColumn":13},{"ruleId":"111","severity":1,"message":"121","line":2,"column":16,"nodeType":"113","messageId":"114","endLine":2,"endColumn":26},{"ruleId":"111","severity":1,"message":"121","line":2,"column":16,"nodeType":"113","messageId":"114","endLine":2,"endColumn":26},{"ruleId":"111","severity":1,"message":"122","line":55,"column":8,"nodeType":"113","messageId":"114","endLine":55,"endColumn":11},{"ruleId":"111","severity":1,"message":"123","line":62,"column":10,"nodeType":"113","messageId":"114","endLine":62,"endColumn":19},{"ruleId":"111","severity":1,"message":"124","line":12,"column":3,"nodeType":"113","messageId":"114","endLine":12,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":132,"column":57,"nodeType":"127","messageId":"128","endLine":132,"endColumn":59},{"ruleId":"129","severity":1,"message":"130","line":133,"column":36,"nodeType":"131","messageId":"132","endLine":133,"endColumn":38},{"ruleId":"129","severity":1,"message":"130","line":146,"column":17,"nodeType":"131","messageId":"132","endLine":146,"endColumn":19},{"ruleId":"125","severity":1,"message":"126","line":231,"column":59,"nodeType":"127","messageId":"128","endLine":231,"endColumn":61},{"ruleId":"111","severity":1,"message":"133","line":7,"column":5,"nodeType":"113","messageId":"114","endLine":7,"endColumn":13},{"ruleId":"111","severity":1,"message":"134","line":1,"column":13,"nodeType":"113","messageId":"114","endLine":1,"endColumn":23},{"ruleId":"111","severity":1,"message":"135","line":1,"column":13,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"137","line":1,"column":1,"nodeType":"138","endLine":236,"endColumn":2},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'PrivateRoute' is defined but never used.","'PublicRoute' is defined but never used.","'Login' is defined but never used.","'useContext' is defined but never used.","'Box' is defined but never used.","'Copyright' is defined but never used.","'NavbarText' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CardText' is defined but never used.","'deviceData' is defined but never used.","'hospitalData' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]