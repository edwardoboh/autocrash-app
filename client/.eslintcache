[{"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/index.js":"1","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/App.js":"2","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/routes/PrivateRoute.js":"3","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/store.js":"4","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/routes/PublicRoute.js":"5","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/Login.js":"6","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Navigation.js":"7","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Map.js":"8","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/reducers/rootReducer.js":"9","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Device.js":"10","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Hospitals.js":"11","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/mapStyles.js":"12","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/reducers/deviceReducer.js":"13","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/reducers/hospitalReducer.js":"14","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/actions/hospitalActions.js":"15","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/actions/deviceActions.js":"16","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/actions/actionTypes.js":"17"},{"size":487,"mtime":1610409092000,"results":"18","hashOfConfig":"19"},{"size":993,"mtime":1619257161161,"results":"20","hashOfConfig":"19"},{"size":951,"mtime":1619258104320,"results":"21","hashOfConfig":"19"},{"size":324,"mtime":1610728780000,"results":"22","hashOfConfig":"19"},{"size":957,"mtime":1617648875517,"results":"23","hashOfConfig":"19"},{"size":5774,"mtime":1619257994976,"results":"24","hashOfConfig":"19"},{"size":3140,"mtime":1617650307868,"results":"25","hashOfConfig":"19"},{"size":4406,"mtime":1619255748905,"results":"26","hashOfConfig":"19"},{"size":262,"mtime":1610728743000,"results":"27","hashOfConfig":"19"},{"size":5638,"mtime":1617645580531,"results":"28","hashOfConfig":"19"},{"size":8338,"mtime":1611503060000,"results":"29","hashOfConfig":"19"},{"size":1999,"mtime":1617654360359,"results":"30","hashOfConfig":"19"},{"size":1088,"mtime":1611501373000,"results":"31","hashOfConfig":"19"},{"size":947,"mtime":1611499018000,"results":"32","hashOfConfig":"19"},{"size":819,"mtime":1611500418000,"results":"33","hashOfConfig":"19"},{"size":1027,"mtime":1611501416000,"results":"34","hashOfConfig":"19"},{"size":304,"mtime":1610802148000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ofuaq",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/index.js",[],["78","79"],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/App.js",[],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/routes/PrivateRoute.js",["80"],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/store.js",[],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/routes/PublicRoute.js",["81"],"// import React, {useState, useEffect, useContext} from 'react'\nimport React, {useContext} from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n// import {LecturerContext} from '../../context/LecturerContext'\n\nconst PublicRoute = (props) => {\n    const {children, ...rest} = props\n    const isAuth = localStorage.getItem(\"isAuthenticated\")\n    // const [isAuthenticated, setIsAuthenticated] = useState(null)\n    // useEffect(() => {\n    //     const authState = localStorage.getItem(\"isAuthenticated\")\n    //     setIsAuthenticated(authState)\n    // }, [])\n\n    // const {state} = useContext(LecturerContext)\n\n    return(\n        <Route\n            {...rest}\n            render = { () => {\n                // return state.isAuthenticated || isAuth === \"true\" ? <Redirect to=\"/dashboard\" /> : children\n                return isAuth === \"true\" ? <Redirect to=\"/dashboard\" /> : children\n            }}\n         />\n    )\n}\n\nexport default PublicRoute","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/Login.js",["82","83"],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Navigation.js",["84","85","86","87","88"],"import React, { useState, useEffect } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  TabPane,\n  TabContent,\n  NavbarText,\n  Row,\n  Col\n} from 'reactstrap';\n\nimport classnames from 'classnames'\nimport Map from './Map';\nimport Hospital from './Hospitals';\nimport Device from './Device';\n\n// Socket IO import\nimport io from 'socket.io-client'\nlet socket;\nconst ENDPOINT = '/'\n\nfunction Navigation(){\n\n  useEffect(() => {\n    socket = io(ENDPOINT)\n    console.log(\"Client: Has connected to server socket\")\n    socket.on(\"update\", (sensorData, callback) => {\n      const {latitude, longitude, accelerometer} = sensorData\n      updateSensorData(sensorData)\n      // callback(\"Response Gotten\")\n    })\n  },[ENDPOINT])\n\n\n  const updateSensorData = ({latitude, longitude, accelerometer}) => {\n    accelerometer = JSON.parse(accelerometer)\n    const {accX, accY, accZ} = accelerometer\n    setDeviceLocation({latitude, longitude, accX, accY, accZ})\n  }\n\n  const [deviceLocation, setDeviceLocation] = useState({latitude: null, longitude: null, accX: 0, accY: 0, accZ: 0})\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  const [activeTab, setActiveTab] = useState('1');\n  const toggleTab = tab => {\n    if(activeTab !== tab) setActiveTab(tab);\n  }\n\n  const handleLogout = () => {\n    localStorage.clear()\n  }\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">AutoCrash</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\" onClick={handleLogout}>Logout</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    <Navbar color=\"light\" light expand=\"md\">\n        <Nav tabs>\n        <NavItem>\n            <NavLink\n                className={classnames({ active: activeTab === '1' })}\n                onClick={() => { toggleTab('1'); }}\n            >\n                Map\n            </NavLink>\n        </NavItem>\n        <NavItem>\n            <NavLink\n                className={classnames({ active: activeTab === '2' })}\n                onClick={() => { toggleTab('2'); }}\n            >\n                Device\n            </NavLink>\n        </NavItem>\n        <NavItem>\n            <NavLink\n                className={classnames({ active: activeTab === '3' })}\n                onClick={() => { toggleTab('3'); }}\n            >\n                Hospitals\n            </NavLink>\n        </NavItem>\n    </Nav>\n    </Navbar>\n\n    <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Row>\n            <Col sm=\"12\">\n              <Map devLoc={deviceLocation}/>\n            </Col>\n          </Row>\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Row>\n            <Device devLoc={deviceLocation}/>\n          </Row>\n        </TabPane>\n        <TabPane tabId=\"3\">\n          <Row>\n            <Hospital />\n          </Row>\n        </TabPane>\n      </TabContent>\n    </div>\n  );\n}\n\nexport default Navigation;","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Map.js",[],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/reducers/rootReducer.js",[],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Device.js",["89","90","91"],"import React, {Component} from 'react'\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n    CardSubtitle,\n    CardText,\n    Button,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Badge\n} from 'reactstrap'\nimport {connect} from 'react-redux'\nimport { getDevices, getDistance, addDevice } from '../../actions/deviceActions'\n\nclass Device extends Component {\n    constructor(props){\n        super()\n        this.state = {\n                device: {\n        \n                },\n                distance: {\n        \n                },\n                deviceName: \"\",\n                deviceId: \"\",\n                modal: false\n            }\n    }\n\n    componentDidMount(){\n        // get Device states and set state here\n        this.props.getDevices()\n        // this.props.getDistance()\n    }\n\n    refreshData = () => {\n        this.props.getDevices()\n        this.props.getDistance()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    deviceInput = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value })\n    }\n\n    updateDevice = () => {\n        const deviceDetails = {\n            deviceName: this.state.deviceName,\n            deviceId: this.state.deviceId\n        }\n\n        this.props.addDevice(deviceDetails)\n    }\n\n    render(){\n        const {devicePositions} = this.props.devices\n        // console.log(this.props)\n        // const {deviceName, deviceId, address, accelerometer, shock, lastUpdate} = devicePositions[0].properties\n        // const {coordinates} = devicePositions[0].geometry\n        // const {accX, accY, accZ} = JSON.parse(accelerometer)\n        return(\n            <div className=\"container\" style={{marginTop: \"2rem\"}}>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Edit Device</Button>\n                {/*  */}\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"deviceName\">Device Name</Label>\n                                <Input type=\"name\" name=\"deviceName\" id=\"deviceName\" placeholder=\"Enter a new name for Device\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"deviceId\">Device ID</Label>\n                                <Input type=\"name\" name=\"deviceId\" id=\"deviceId\" placeholder=\"Enter an ID\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <Button onClick={this.updateDevice} color=\"dark\" block>Save</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                {/*  */}\n                {\n                    devicePositions.map(device => {\n                        // console.log(this.props)\n                        const {deviceName, deviceId, address, shock, accelerometer, lastUpdate} = device.properties\n                        const {coordinates} = device.geometry\n                        const {latitude, longitude, accX, accY, accZ} = this.props.devLoc \n                        // const {accX, accY, accZ} = JSON.parse(accelerometer)\n                            return(\n                                <div key={device.properties.id}>\n                                    <Card md=\"10\" xs=\"6\" sm=\"8\">\n                                        {/* <CardImg top width=\"\" src=\"/dev3.jpg\" alt=\"Card image cap\" /> */}\n                                        <img width=\"10%\" src=\"/dev3.jpg\" alt=\"device\" />\n                                        <CardBody>\n                                            <CardTitle tag=\"h5\">Name: {`${deviceName}`}</CardTitle>\n                                            <CardSubtitle tag=\"h7\" className=\"mb-2 text-muted\">ID: {`${deviceId}`}</CardSubtitle><br />\n                                            Shock State: <Badge pill>{`${shock ? \"TRUE\" : \"FALSE\"}`}</Badge><br />\n                                            Address: <Badge pill>{`${address}`}</Badge><br />\n                                            {/* Latitude: <Badge color=\"secondary\" pill>{`${coordinates[0]}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${coordinates[1]}`}</Badge><br /> */}\n                                            Latitude: <Badge color=\"secondary\" pill>{`${latitude}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${longitude}`}</Badge><br />\n                                            Accelerometer::   X: <Badge pill>{`${accX}`}</Badge>   Y: <Badge pill>{`${accY}`}</Badge>   Z: <Badge pill>{`${accZ}`}</Badge><br />\n                                            Last Update: <Badge pill>{`${lastUpdate}`}</Badge><br /><br />\n                                            <Button color=\"dark\" onClick={this.refreshData}>Refresh</Button>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            )\n                        }\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    devices: state.devices,\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {getDevices, getDistance, addDevice})(Device)","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/Hospitals.js",["92"],"import React, {Component} from 'react'\nimport {\n    ListGroup,\n    ListGroupItem,\n    ListGroupItemHeading,\n    ListGroupItemText,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Row\n} from 'reactstrap'\n\nimport {connect} from 'react-redux'\n\nimport {addHospital, getHospitals} from '../../actions/hospitalActions'\n\nclass Hospital extends Component {\n    constructor(){\n        super()\n        this.state = {\n            newHospital: {\n                hospitalName: \"\",\n                address: \"\",\n                email: \"\",\n                latitude: null,\n                longitude: null,\n                phonePrimary: \"\",\n                phoneSecondary: \"\",\n                numOfAmbulance: \"\",\n            },\n            modal: false,\n            search: null\n        }\n    }\n\n    componentDidMount(){\n        // function to get all hospitals\n        this.props.getHospitals()\n    }\n\n    // Action to create new hospital\n    newHospital = () => {\n        const newHospital = {\n            properties: {\n                hospitalName: this.state.newHospital.hospitalName,\n                address: this.state.newHospital.address,\n                email: this.state.newHospital.email,\n                phonePrimary: this.state.newHospital.phonePrimary,\n                phoneSecondary: this.state.newHospital.phoneSecondary,\n                numOfAmbulance: this.state.newHospital.numOfAmbulance,\n            },\n            geometry: {\n                coordinates: [Number(this.state.newHospital.longitude), Number(this.state.newHospital.latitude)]\n            }\n        }\n        console.log(newHospital)\n        this.props.addHospital(newHospital)\n\n        // Check to see if add was successful and then call toggle\n        this.toggleModal()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    hospitalInput = (event) => {\n        this.setState({...this.state, newHospital : {...this.state.newHospital, [event.target.name] : event.target.value}})\n    }\n\n    searchByName = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value})\n    }\n\n    render(){\n\n        const {hospitalPositions} = this.props.hospitals\n\n        return(\n            <div className=\"container\">\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"name\">Hospital Name</Label>\n                                <Input type=\"name\" name=\"hospitalName\" id=\"hospitalName\" placeholder=\"Enter name of hospital\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"email\">Email</Label>\n                                <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter email address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"address\">Address</Label>\n                                <Input type=\"text\" name=\"address\" id=\"address\" placeholder=\"Enter address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"latitude\">Latitude</Label>\n                                        <Input type=\"number\" name=\"latitude\" id=\"latitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"longitude\">Longitude</Label>\n                                        <Input type=\"number\" name=\"longitude\" id=\"longitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phonePrimary\">Phone 1</Label>\n                                        <Input type=\"tel\" name=\"phonePrimary\" id=\"phonePrimary\" placeholder=\"Enter Modile Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phoneSecondary\">Phone 2</Label>\n                                        <Input type=\"tel\" name=\"phoneSecondary\" id=\"phoneSecondary\" placeholder=\"Enter Office Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <FormGroup>\n                                <Label for=\"numOfAmbulance\">No. of Ambulance</Label>\n                                <Input type=\"select\" name=\"numOfAmbulance\" id=\"numOfAmbulance\" onChange={this.hospitalInput} >\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                    <option value=\"6\">6</option>\n                                    <option value=\"7\">7</option>\n                                    <option value=\"8\">8</option>\n                                </Input>\n                            </FormGroup>\n                            <Button onClick={this.newHospital} color=\"dark\" block>Add Hospital</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Create</Button>\n                <hr />\n                <Input type=\"text\" name=\"search\" placeholder=\"Search Hospital by name\" onChange={this.searchByName} />\n                <br />\n                <ListGroup>\n                    {\n                        hospitalPositions.filter(hospital => {\n                            if(this.state.search == null){\n                                return hospital\n                            }else if(hospital.properties.hospitalName.toLowerCase().includes(this.state.search.toLowerCase())){\n                                return hospital\n                            }\n                        })\n                        .map(hospital =>\n                            <div key={hospital.properties.id}>\n                                <ListGroupItem>\n                                    <ListGroupItemHeading>{hospital.properties.hospitalName}</ListGroupItemHeading>\n                                    <ListGroupItemText>{hospital.properties.address}</ListGroupItemText>\n                                    <ListGroupItemText>Phone: {hospital.properties.phonePrimary}   |   Email: {hospital.properties.email}</ListGroupItemText>\n                                    <ListGroupItemText>Ambulance Vehicles: {hospital.properties.numOfAmbulance}</ListGroupItemText>\n                                    <hr />\n                                    <ListGroupItemText>Latitude: {hospital.geometry.coordinates[0]} | Longitude: {hospital.geometry.coordinates[1]}</ListGroupItemText>\n                                    \n                                </ListGroupItem>\n                                <br />\n                            </div> \n                        )\n                    }\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {addHospital, getHospitals})(Hospital)","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/components/admin/mapStyles.js",["93"],"export default [\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#193341\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#2c5a71\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#29768a\"\n            },\n            {\n                \"lightness\": -37\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#406d80\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#406d80\"\n            }\n        ]\n    },\n    {\n        \"elementType\": \"labels.text.stroke\",\n        \"stylers\": [\n            {\n                \"visibility\": \"on\"\n            },\n            {\n                \"color\": \"#3e606f\"\n            },\n            {\n                \"weight\": 2\n            },\n            {\n                \"gamma\": 0.84\n            }\n        ]\n    },\n    {\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#ffffff\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"weight\": 0.6\n            },\n            {\n                \"color\": \"#1a3541\"\n            }\n        ]\n    },\n    {\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#2c5a71\"\n            }\n        ]\n    }\n]","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/reducers/deviceReducer.js",["94"],"import * as deviceData from '../data/deviceData.json'\nimport {ADD_DEVICE, DELETE_DEVICE, GET_DEVICES, GET_DISTANCE} from '../actions/actionTypes'\n\nconst initialState = {\n            // devicePositions: deviceData.default.features,\n            devicePositions: [],\n            // distances: []\n        }\n\nconst deviceReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_DEVICES:\n            return {\n                ...state,\n                devicePositions: action.payload\n\n            }\n        case GET_DISTANCE:\n            return {\n                ...state,\n                distances: action.payload\n\n            }\n        case ADD_DEVICE:\n            return {\n                ...state,\n                devicePositions: [action.payload, ...state.devicePositions]\n            }\n        case DELETE_DEVICE:\n            return {\n                ...state,\n                devicePositions: [state.devicePositions.filter(devPos => devPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default deviceReducer","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/reducers/hospitalReducer.js",["95"],"import * as hospitalData from '../data/hospitalData.json'\nimport {ADD_HOSPITAL, DELETE_HOSPITAL, GET_HOSPITALS} from '../actions/actionTypes'\n\nconst initialState = {\n            // hospitalPositions: hospitalData.default.features\n            hospitalPositions: []\n        }\n\nconst hospitalReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_HOSPITALS:\n            return {\n                ...state,\n                hospitalPositions: action.payload\n            }\n        case ADD_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [action.payload, ...state.hospitalPositions]\n            }\n        case DELETE_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [state.hospitalPositions.filter(hosPos => hosPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default hospitalReducer","/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/actions/hospitalActions.js",[],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/actions/deviceActions.js",[],"/home/edward/Documents/AUTO CRASH/react-auto-crash/client/src/actions/actionTypes.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":16,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"100","severity":1,"message":"101","line":2,"column":16,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"100","severity":1,"message":"104","line":55,"column":8,"nodeType":"102","messageId":"103","endLine":55,"endColumn":11},{"ruleId":"100","severity":1,"message":"105","line":62,"column":10,"nodeType":"102","messageId":"103","endLine":62,"endColumn":19},{"ruleId":"100","severity":1,"message":"106","line":12,"column":3,"nodeType":"102","messageId":"103","endLine":12,"endColumn":13},{"ruleId":"100","severity":1,"message":"107","line":33,"column":14,"nodeType":"102","messageId":"103","endLine":33,"endColumn":22},{"ruleId":"100","severity":1,"message":"108","line":33,"column":24,"nodeType":"102","messageId":"103","endLine":33,"endColumn":33},{"ruleId":"100","severity":1,"message":"109","line":33,"column":35,"nodeType":"102","messageId":"103","endLine":33,"endColumn":48},{"ruleId":"110","severity":1,"message":"111","line":37,"column":5,"nodeType":"112","endLine":37,"endColumn":15,"suggestions":"113"},{"ruleId":"100","severity":1,"message":"114","line":7,"column":5,"nodeType":"102","messageId":"103","endLine":7,"endColumn":13},{"ruleId":"100","severity":1,"message":"109","line":97,"column":70,"nodeType":"102","messageId":"103","endLine":97,"endColumn":83},{"ruleId":"100","severity":1,"message":"115","line":98,"column":32,"nodeType":"102","messageId":"103","endLine":98,"endColumn":43},{"ruleId":"116","severity":1,"message":"117","line":156,"column":59,"nodeType":"118","messageId":"119","endLine":156,"endColumn":61},{"ruleId":"120","severity":1,"message":"121","line":1,"column":1,"nodeType":"122","endLine":104,"endColumn":2},{"ruleId":"100","severity":1,"message":"123","line":1,"column":13,"nodeType":"102","messageId":"103","endLine":1,"endColumn":23},{"ruleId":"100","severity":1,"message":"124","line":1,"column":13,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Copyright' is defined but never used.","'NavbarText' is defined but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.","'accelerometer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'ENDPOINT'. Either exclude it or remove the dependency array. Outer scope values like 'ENDPOINT' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["127"],"'CardText' is defined but never used.","'coordinates' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'deviceData' is defined but never used.","'hospitalData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},"Update the dependencies array to be: []",{"range":"130","text":"131"},[760,770],"[]"]