[{"/home/edward/Documents/react-auto-crash/client/src/index.js":"1","/home/edward/Documents/react-auto-crash/client/src/App.js":"2","/home/edward/Documents/react-auto-crash/client/src/components/Welcome.js":"3","/home/edward/Documents/react-auto-crash/client/src/components/Signup.js":"4","/home/edward/Documents/react-auto-crash/client/src/components/Login.js":"5","/home/edward/Documents/react-auto-crash/client/src/components/admin/Navigation.js":"6","/home/edward/Documents/react-auto-crash/client/src/components/admin/Map.js":"7","/home/edward/Documents/react-auto-crash/client/src/components/admin/Hospitals.js":"8","/home/edward/Documents/react-auto-crash/client/src/components/admin/Device.js":"9","/home/edward/Documents/react-auto-crash/client/src/CompTest.js":"10","/home/edward/Documents/react-auto-crash/client/src/store.js":"11","/home/edward/Documents/react-auto-crash/client/src/reducers/rootReducer.js":"12","/home/edward/Documents/react-auto-crash/client/src/actions/hospitalActions.js":"13","/home/edward/Documents/react-auto-crash/client/src/actions/deviceActions.js":"14","/home/edward/Documents/react-auto-crash/client/src/reducers/deviceReducer.js":"15","/home/edward/Documents/react-auto-crash/client/src/reducers/hospitalReducer.js":"16","/home/edward/Documents/react-auto-crash/client/src/actions/actionTypes.js":"17","/home/edward/Documents/react-auto-crash/client/src/routes/PrivateRoute.js":"18","/home/edward/Documents/react-auto-crash/client/src/routes/PublicRoute.js":"19"},{"size":487,"mtime":1610409092000,"results":"20","hashOfConfig":"21"},{"size":993,"mtime":1617648942587,"results":"22","hashOfConfig":"21"},{"size":1699,"mtime":1610447071000,"results":"23","hashOfConfig":"21"},{"size":11466,"mtime":1617568671805,"results":"24","hashOfConfig":"21"},{"size":5587,"mtime":1617649751519,"results":"25","hashOfConfig":"21"},{"size":3140,"mtime":1617650307868,"results":"26","hashOfConfig":"21"},{"size":4256,"mtime":1617647779927,"results":"27","hashOfConfig":"21"},{"size":8338,"mtime":1611503060000,"results":"28","hashOfConfig":"21"},{"size":5638,"mtime":1617645580531,"results":"29","hashOfConfig":"21"},{"size":2341,"mtime":1610737620298,"results":"30","hashOfConfig":"21"},{"size":324,"mtime":1610728780000,"results":"31","hashOfConfig":"21"},{"size":262,"mtime":1610728743000,"results":"32","hashOfConfig":"21"},{"size":819,"mtime":1611500418000,"results":"33","hashOfConfig":"21"},{"size":1027,"mtime":1611501416000,"results":"34","hashOfConfig":"21"},{"size":1088,"mtime":1611501373000,"results":"35","hashOfConfig":"21"},{"size":947,"mtime":1611499018000,"results":"36","hashOfConfig":"21"},{"size":304,"mtime":1610802148000,"results":"37","hashOfConfig":"21"},{"size":952,"mtime":1617648847792,"results":"38","hashOfConfig":"21"},{"size":957,"mtime":1617648875517,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1mobd5w",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/edward/Documents/react-auto-crash/client/src/index.js",[],["85","86"],"/home/edward/Documents/react-auto-crash/client/src/App.js",[],"/home/edward/Documents/react-auto-crash/client/src/components/Welcome.js",[],"/home/edward/Documents/react-auto-crash/client/src/components/Signup.js",[],"/home/edward/Documents/react-auto-crash/client/src/components/Login.js",["87","88"],"/home/edward/Documents/react-auto-crash/client/src/components/admin/Navigation.js",["89","90","91","92","93"],"/home/edward/Documents/react-auto-crash/client/src/components/admin/Map.js",[],"/home/edward/Documents/react-auto-crash/client/src/components/admin/Hospitals.js",["94"],"import React, {Component} from 'react'\nimport {\n    ListGroup,\n    ListGroupItem,\n    ListGroupItemHeading,\n    ListGroupItemText,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Row\n} from 'reactstrap'\n\nimport {connect} from 'react-redux'\n\nimport {addHospital, getHospitals} from '../../actions/hospitalActions'\n\nclass Hospital extends Component {\n    constructor(){\n        super()\n        this.state = {\n            newHospital: {\n                hospitalName: \"\",\n                address: \"\",\n                email: \"\",\n                latitude: null,\n                longitude: null,\n                phonePrimary: \"\",\n                phoneSecondary: \"\",\n                numOfAmbulance: \"\",\n            },\n            modal: false,\n            search: null\n        }\n    }\n\n    componentDidMount(){\n        // function to get all hospitals\n        this.props.getHospitals()\n    }\n\n    // Action to create new hospital\n    newHospital = () => {\n        const newHospital = {\n            properties: {\n                hospitalName: this.state.newHospital.hospitalName,\n                address: this.state.newHospital.address,\n                email: this.state.newHospital.email,\n                phonePrimary: this.state.newHospital.phonePrimary,\n                phoneSecondary: this.state.newHospital.phoneSecondary,\n                numOfAmbulance: this.state.newHospital.numOfAmbulance,\n            },\n            geometry: {\n                coordinates: [Number(this.state.newHospital.longitude), Number(this.state.newHospital.latitude)]\n            }\n        }\n        console.log(newHospital)\n        this.props.addHospital(newHospital)\n\n        // Check to see if add was successful and then call toggle\n        this.toggleModal()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    hospitalInput = (event) => {\n        this.setState({...this.state, newHospital : {...this.state.newHospital, [event.target.name] : event.target.value}})\n    }\n\n    searchByName = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value})\n    }\n\n    render(){\n\n        const {hospitalPositions} = this.props.hospitals\n\n        return(\n            <div className=\"container\">\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"name\">Hospital Name</Label>\n                                <Input type=\"name\" name=\"hospitalName\" id=\"hospitalName\" placeholder=\"Enter name of hospital\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"email\">Email</Label>\n                                <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter email address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"address\">Address</Label>\n                                <Input type=\"text\" name=\"address\" id=\"address\" placeholder=\"Enter address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"latitude\">Latitude</Label>\n                                        <Input type=\"number\" name=\"latitude\" id=\"latitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"longitude\">Longitude</Label>\n                                        <Input type=\"number\" name=\"longitude\" id=\"longitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phonePrimary\">Phone 1</Label>\n                                        <Input type=\"tel\" name=\"phonePrimary\" id=\"phonePrimary\" placeholder=\"Enter Modile Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phoneSecondary\">Phone 2</Label>\n                                        <Input type=\"tel\" name=\"phoneSecondary\" id=\"phoneSecondary\" placeholder=\"Enter Office Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <FormGroup>\n                                <Label for=\"numOfAmbulance\">No. of Ambulance</Label>\n                                <Input type=\"select\" name=\"numOfAmbulance\" id=\"numOfAmbulance\" onChange={this.hospitalInput} >\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                    <option value=\"6\">6</option>\n                                    <option value=\"7\">7</option>\n                                    <option value=\"8\">8</option>\n                                </Input>\n                            </FormGroup>\n                            <Button onClick={this.newHospital} color=\"dark\" block>Add Hospital</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Create</Button>\n                <hr />\n                <Input type=\"text\" name=\"search\" placeholder=\"Search Hospital by name\" onChange={this.searchByName} />\n                <br />\n                <ListGroup>\n                    {\n                        hospitalPositions.filter(hospital => {\n                            if(this.state.search == null){\n                                return hospital\n                            }else if(hospital.properties.hospitalName.toLowerCase().includes(this.state.search.toLowerCase())){\n                                return hospital\n                            }\n                        })\n                        .map(hospital =>\n                            <div key={hospital.properties.id}>\n                                <ListGroupItem>\n                                    <ListGroupItemHeading>{hospital.properties.hospitalName}</ListGroupItemHeading>\n                                    <ListGroupItemText>{hospital.properties.address}</ListGroupItemText>\n                                    <ListGroupItemText>Phone: {hospital.properties.phonePrimary}   |   Email: {hospital.properties.email}</ListGroupItemText>\n                                    <ListGroupItemText>Ambulance Vehicles: {hospital.properties.numOfAmbulance}</ListGroupItemText>\n                                    <hr />\n                                    <ListGroupItemText>Latitude: {hospital.geometry.coordinates[0]} | Longitude: {hospital.geometry.coordinates[1]}</ListGroupItemText>\n                                    \n                                </ListGroupItem>\n                                <br />\n                            </div> \n                        )\n                    }\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {addHospital, getHospitals})(Hospital)","/home/edward/Documents/react-auto-crash/client/src/components/admin/Device.js",["95","96","97"],"import React, {Component} from 'react'\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n    CardSubtitle,\n    CardText,\n    Button,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Badge\n} from 'reactstrap'\nimport {connect} from 'react-redux'\nimport { getDevices, getDistance, addDevice } from '../../actions/deviceActions'\n\nclass Device extends Component {\n    constructor(props){\n        super()\n        this.state = {\n                device: {\n        \n                },\n                distance: {\n        \n                },\n                deviceName: \"\",\n                deviceId: \"\",\n                modal: false\n            }\n    }\n\n    componentDidMount(){\n        // get Device states and set state here\n        this.props.getDevices()\n        // this.props.getDistance()\n    }\n\n    refreshData = () => {\n        this.props.getDevices()\n        this.props.getDistance()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    deviceInput = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value })\n    }\n\n    updateDevice = () => {\n        const deviceDetails = {\n            deviceName: this.state.deviceName,\n            deviceId: this.state.deviceId\n        }\n\n        this.props.addDevice(deviceDetails)\n    }\n\n    render(){\n        const {devicePositions} = this.props.devices\n        // console.log(this.props)\n        // const {deviceName, deviceId, address, accelerometer, shock, lastUpdate} = devicePositions[0].properties\n        // const {coordinates} = devicePositions[0].geometry\n        // const {accX, accY, accZ} = JSON.parse(accelerometer)\n        return(\n            <div className=\"container\" style={{marginTop: \"2rem\"}}>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Edit Device</Button>\n                {/*  */}\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"deviceName\">Device Name</Label>\n                                <Input type=\"name\" name=\"deviceName\" id=\"deviceName\" placeholder=\"Enter a new name for Device\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"deviceId\">Device ID</Label>\n                                <Input type=\"name\" name=\"deviceId\" id=\"deviceId\" placeholder=\"Enter an ID\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <Button onClick={this.updateDevice} color=\"dark\" block>Save</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                {/*  */}\n                {\n                    devicePositions.map(device => {\n                        // console.log(this.props)\n                        const {deviceName, deviceId, address, shock, accelerometer, lastUpdate} = device.properties\n                        const {coordinates} = device.geometry\n                        const {latitude, longitude, accX, accY, accZ} = this.props.devLoc \n                        // const {accX, accY, accZ} = JSON.parse(accelerometer)\n                            return(\n                                <div key={device.properties.id}>\n                                    <Card md=\"10\" xs=\"6\" sm=\"8\">\n                                        {/* <CardImg top width=\"\" src=\"/dev3.jpg\" alt=\"Card image cap\" /> */}\n                                        <img width=\"10%\" src=\"/dev3.jpg\" alt=\"device\" />\n                                        <CardBody>\n                                            <CardTitle tag=\"h5\">Name: {`${deviceName}`}</CardTitle>\n                                            <CardSubtitle tag=\"h7\" className=\"mb-2 text-muted\">ID: {`${deviceId}`}</CardSubtitle><br />\n                                            Shock State: <Badge pill>{`${shock ? \"TRUE\" : \"FALSE\"}`}</Badge><br />\n                                            Address: <Badge pill>{`${address}`}</Badge><br />\n                                            {/* Latitude: <Badge color=\"secondary\" pill>{`${coordinates[0]}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${coordinates[1]}`}</Badge><br /> */}\n                                            Latitude: <Badge color=\"secondary\" pill>{`${latitude}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${longitude}`}</Badge><br />\n                                            Accelerometer::   X: <Badge pill>{`${accX}`}</Badge>   Y: <Badge pill>{`${accY}`}</Badge>   Z: <Badge pill>{`${accZ}`}</Badge><br />\n                                            Last Update: <Badge pill>{`${lastUpdate}`}</Badge><br /><br />\n                                            <Button color=\"dark\" onClick={this.refreshData}>Refresh</Button>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            )\n                        }\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    devices: state.devices,\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {getDevices, getDistance, addDevice})(Device)","/home/edward/Documents/react-auto-crash/client/src/CompTest.js",["98"],"// import React, { useState } from 'react'\n\n// function CompTest(){\n//     const [objState, setObjState] = useState({\n//         name: \"\",\n//         email: \"\",\n//         password: \"\"\n//     })\n\n//     const handleChange = (event) => {\n//         setObjState({...objState, [event.target.name]: event.target.value})\n//     }\n\n//     const submitForm = (e) => {\n//         e.preventDefault()\n//         console.log(objState)\n//     }\n\n//     return(\n//         <div>\n//             <form onSubmit={submitForm}>\n//                 <label>Name</label>\n//                 <input type=\"text\" name=\"name\" onChange={handleChange}/>\n//                 <label>Email</label>\n//                 <input type=\"text\" name=\"email\" onChange={handleChange} />\n//                 <label>Password</label>\n//                 <input type=\"password\" name=\"password\" onChange={handleChange} />\n//                 <input type=\"submit\" value=\"Submit\" />\n//             </form>\n//         </div>\n//     )\n// }\n// export default CompTest\n\nimport React, { useState, Component } from 'react'\n\nclass CompTest extends Component{\n    state = {\n        user: {\n            name: \"\",\n            email: \"\",\n            password: \"\"\n        },\n        admin: \"EDWARD OBOH\"\n    }\n\n    handleChange = (event) => {\n        this.setState({user: {...this.state.user, [event.target.name]: event.target.value}})\n    }\n\n    submitForm = (e) => {\n        e.preventDefault()\n        console.log(this.state)\n    }\n\n    handleBind = (valueT, event) => {\n        console.log(valueT)\n        console.log(event.target.name)\n    }\n\n    render(){\n\n        return(\n            <div>\n                <form onSubmit={this.submitForm}>\n                    <label>Name</label>\n                    <input type=\"text\" name=\"name\" onChange={this.handleChange}/>\n                    <label>Email</label>\n                    <input type=\"text\" name=\"email\" onChange={this.handleChange} />\n                    <label>Password</label>\n                    <input type=\"password\" name=\"password\" onChange={this.handleChange} />\n                    <label>Bind Test</label>\n                    <input type=\"text\" name=\"text\" onChange={this.handleBind.bind(this, \"mango\")} />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n            </div>\n        )\n    }\n}\nexport default CompTest",["99","100"],"/home/edward/Documents/react-auto-crash/client/src/store.js",[],"/home/edward/Documents/react-auto-crash/client/src/reducers/rootReducer.js",[],"/home/edward/Documents/react-auto-crash/client/src/actions/hospitalActions.js",[],"/home/edward/Documents/react-auto-crash/client/src/actions/deviceActions.js",[],"/home/edward/Documents/react-auto-crash/client/src/reducers/deviceReducer.js",["101"],"import * as deviceData from '../data/deviceData.json'\nimport {ADD_DEVICE, DELETE_DEVICE, GET_DEVICES, GET_DISTANCE} from '../actions/actionTypes'\n\nconst initialState = {\n            // devicePositions: deviceData.default.features,\n            devicePositions: [],\n            // distances: []\n        }\n\nconst deviceReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_DEVICES:\n            return {\n                ...state,\n                devicePositions: action.payload\n\n            }\n        case GET_DISTANCE:\n            return {\n                ...state,\n                distances: action.payload\n\n            }\n        case ADD_DEVICE:\n            return {\n                ...state,\n                devicePositions: [action.payload, ...state.devicePositions]\n            }\n        case DELETE_DEVICE:\n            return {\n                ...state,\n                devicePositions: [state.devicePositions.filter(devPos => devPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default deviceReducer","/home/edward/Documents/react-auto-crash/client/src/reducers/hospitalReducer.js",["102"],"import * as hospitalData from '../data/hospitalData.json'\nimport {ADD_HOSPITAL, DELETE_HOSPITAL, GET_HOSPITALS} from '../actions/actionTypes'\n\nconst initialState = {\n            // hospitalPositions: hospitalData.default.features\n            hospitalPositions: []\n        }\n\nconst hospitalReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_HOSPITALS:\n            return {\n                ...state,\n                hospitalPositions: action.payload\n            }\n        case ADD_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [action.payload, ...state.hospitalPositions]\n            }\n        case DELETE_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [state.hospitalPositions.filter(hosPos => hosPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default hospitalReducer","/home/edward/Documents/react-auto-crash/client/src/actions/actionTypes.js",[],"/home/edward/Documents/react-auto-crash/client/src/routes/PrivateRoute.js",["103"],"/home/edward/Documents/react-auto-crash/client/src/routes/PublicRoute.js",["104"],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":55,"column":8,"nodeType":"111","messageId":"112","endLine":55,"endColumn":11},{"ruleId":"109","severity":1,"message":"113","line":61,"column":10,"nodeType":"111","messageId":"112","endLine":61,"endColumn":19},{"ruleId":"109","severity":1,"message":"114","line":12,"column":3,"nodeType":"111","messageId":"112","endLine":12,"endColumn":13},{"ruleId":"109","severity":1,"message":"115","line":33,"column":14,"nodeType":"111","messageId":"112","endLine":33,"endColumn":22},{"ruleId":"109","severity":1,"message":"116","line":33,"column":24,"nodeType":"111","messageId":"112","endLine":33,"endColumn":33},{"ruleId":"109","severity":1,"message":"117","line":33,"column":35,"nodeType":"111","messageId":"112","endLine":33,"endColumn":48},{"ruleId":"118","severity":1,"message":"119","line":37,"column":5,"nodeType":"120","endLine":37,"endColumn":15,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":156,"column":59,"nodeType":"124","messageId":"125","endLine":156,"endColumn":61},{"ruleId":"109","severity":1,"message":"126","line":7,"column":5,"nodeType":"111","messageId":"112","endLine":7,"endColumn":13},{"ruleId":"109","severity":1,"message":"117","line":97,"column":70,"nodeType":"111","messageId":"112","endLine":97,"endColumn":83},{"ruleId":"109","severity":1,"message":"127","line":98,"column":32,"nodeType":"111","messageId":"112","endLine":98,"endColumn":43},{"ruleId":"109","severity":1,"message":"128","line":35,"column":17,"nodeType":"111","messageId":"112","endLine":35,"endColumn":25},{"ruleId":"105","replacedBy":"129"},{"ruleId":"107","replacedBy":"130"},{"ruleId":"109","severity":1,"message":"131","line":1,"column":13,"nodeType":"111","messageId":"112","endLine":1,"endColumn":23},{"ruleId":"109","severity":1,"message":"132","line":1,"column":13,"nodeType":"111","messageId":"112","endLine":1,"endColumn":25},{"ruleId":"109","severity":1,"message":"133","line":2,"column":16,"nodeType":"111","messageId":"112","endLine":2,"endColumn":26},{"ruleId":"109","severity":1,"message":"133","line":2,"column":16,"nodeType":"111","messageId":"112","endLine":2,"endColumn":26},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Copyright' is defined but never used.","'NavbarText' is defined but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.","'accelerometer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'ENDPOINT'. Either exclude it or remove the dependency array. Outer scope values like 'ENDPOINT' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["136"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CardText' is defined but never used.","'coordinates' is assigned a value but never used.","'useState' is defined but never used.",["134"],["135"],"'deviceData' is defined but never used.","'hospitalData' is defined but never used.","'useContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},"Update the dependencies array to be: []",{"range":"139","text":"140"},[760,770],"[]"]